job_gcc_amd64:
  script:
    - ./autogen.sh
    - ./configure CXX="ccache g++" PYTHON=python3 --prefix=$PWD/install --with-python-module-path=$PWD/install/site-packages
    - CCACHE_BASEDIR=$PWD make $MAKEOPTS
    - make install
    - export PYTHONPATH=$PWD/install/site-packages
    - cd doc; (mkdir builds envs; pids=(); for f in `ls *rst`; do python3 /usr/bin/sphinx-build -E -d envs/$f -b doctest . builds/$f $f & pids+=($!); done; for p in "${pids[@]}"; do wait "$p"; done);
  tags:
    - amd64
  except:
    - tags

job_clang_amd64:
  script:
    - ./autogen.sh
    - ./configure CXX="ccache clang++" PYTHON=python3 --prefix=$PWD/install --with-python-module-path=$PWD/install/site-packages
    - CCACHE_BASEDIR=$PWD make $MAKEOPTS
    - make install
    - export PYTHONPATH=$PWD/install/site-packages
    - cd doc; (mkdir builds envs; pids=(); for f in `ls *rst`; do python3 /usr/bin/sphinx-build -E -d envs/$f -b doctest . builds/$f $f & pids+=($!); done; for p in "${pids[@]}"; do wait "$p"; done);
  tags:
    - amd64
  except:
    - tags

job_clang_cxx_amd64:
  script:
    - ./autogen.sh
    - ./configure CXX="ccache clang++" PYTHON=python3 CXXFLAGS="-stdlib=libc++" LDFLAGS="-lc++abi" --disable-openmp
    - CCACHE_BASEDIR=$PWD make $MAKEOPTS
  tags:
    - amd64
  except:
    - tags

build_tarball:
  script:
    - ./autogen.sh
    - ./configure
    - make dist-bzip2
    - make dist-xz
    - bunzip2 -k *bz2
    - zstd *.tar
  only:
    - tags
  artifacts:
    paths:
      - graph-tool*bz2
      - graph-tool*xz
      - graph-tool*zst

.build_deb:
  variables:
    BASE: ""
    PLATFORM: ""
  before_script:
    - export DEB_VERSION=1
  script:
    - img=`echo $BASE | sed s/:/_/`
    - cd release/debian
    - docker buildx build --platform linux/$PLATFORM --build-arg BASE=$BASE --build-arg DEB_VERSION=$DEB_VERSION --build-arg REF=`git log -n1 --pretty='%H'` -t $img . --no-cache --pull --load
    - docker run --platform linux/$PLATFORM -v $PWD:/mount $img tar -c build | tar x
    - name=`echo $BASE | grep -o ":.*" | sed s/://`
    - f=`ls build/python3-graph-tool_*.deb`
    - nf=`echo $f | sed s/.deb/_$name.deb/`
    - mv $f $nf
    - aptly repo create $name || true
    - aptly repo add $name $nf || true
    - aptly publish drop $name filesystem:skewed:/apt-git || true
    - aptly publish repo -distribution=$name $name filesystem:skewed:/apt-git || true
    - aptly publish update $name filesystem:skewed:/apt-git || true
  only:
    - tags
  artifacts:
    paths:
      - release/debian/build/*

.build_deb_git:
  extends: .build_deb
  before_script:
    - last_relase=$(git tag -l "release-*" --sort=version:refname | tail -n 1)
    - DEB_VERSION=$(git rev-list release-2.52..HEAD --count)
  only:
  except:
    - tags
  needs: ["job_gcc_amd64"]

build_sid:
  extends: .build_deb
  variables:
    BASE: debian:sid
    PLATFORM: amd64

build_sid_arm:
  extends: .build_deb
  variables:
    BASE: debian:sid
    PLATFORM: arm64
  needs: ["build_sid"]

build_sid_git:
  extends: .build_deb_git
  variables:
    BASE: debian:sid
    PLATFORM: amd64

build_bookworm:
  extends: .build_deb
  variables:
    BASE: debian:bookworm
    PLATFORM: amd64

build_bookworm_arm:
  extends: .build_deb
  variables:
    BASE: debian:bookworm
    PLATFORM: arm64
  needs: ["build_bookworm"]

build_bookworm_git:
  extends: .build_deb_git
  variables:
    BASE: debian:bookworm
    PLATFORM: amd64

build_bullseye:
  extends: .build_deb
  variables:
    BASE: debian:bullseye
    PLATFORM: amd64

build_bullseye_arm:
  extends: .build_deb
  variables:
    BASE: debian:bullseye
    PLATFORM: arm64
  needs: ["build_bullseye"]

build_bullseye_git:
  extends: .build_deb_git
  variables:
    BASE: debian:bullseye
    PLATFORM: amd64

build_buster:
  extends: .build_deb
  variables:
    BASE: debian:buster
    PLATFORM: amd64

build_buster_arm:
  extends: .build_deb
  variables:
    BASE: debian:buster
    PLATFORM: arm64
  needs: ["build_buster"]

build_buster_git:
  extends: .build_deb_git
  variables:
    BASE: debian:buster
    PLATFORM: amd64

build_bionic:
  extends: .build_deb
  variables:
    BASE: ubuntu:bionic
    PLATFORM: amd64

build_bionic_arm:
  extends: .build_deb
  variables:
    BASE: ubuntu:bionic
    PLATFORM: arm64
  needs: ["build_bionic"]

build_bionic_git:
  extends: .build_deb_git
  variables:
    BASE: ubuntu:bionic
    PLATFORM: amd64

build_focal:
  extends: .build_deb
  variables:
    BASE: ubuntu:focal
    PLATFORM: amd64

build_focal_arm:
  extends: .build_deb
  variables:
    BASE: ubuntu:focal
    PLATFORM: arm64
  needs: ["build_focal"]

build_focal_git:
  extends: .build_deb_git
  variables:
    BASE: ubuntu:focal
    PLATFORM: amd64

build_jammy:
  extends: .build_deb
  variables:
    BASE: ubuntu:jammy
    PLATFORM: amd64

build_jammy_arm:
  extends: .build_deb
  variables:
    BASE: ubuntu:jammy
    PLATFORM: arm64
  needs: ["build_jammy"]

build_jammy_git:
  extends: .build_deb_git
  variables:
    BASE: ubuntu:jammy
    PLATFORM: amd64

build_kinetic:
  extends: .build_deb
  variables:
    BASE: ubuntu:kinetic
    PLATFORM: amd64

build_kinetic_arm:
  extends: .build_deb
  variables:
    BASE: ubuntu:kinetic
    PLATFORM: arm64
  needs: ["build_kinetic"]

build_kinetic_git:
  extends: .build_deb_git
  variables:
    BASE: ubuntu:kinetic
    PLATFORM: amd64

build_docker:
  script:
    - cd release/docker
    - docker build --build-arg REF=`git log -n1 --pretty='%H'` -t tiagopeixoto/graph-tool . --no-cache --pull
    - docker login -u tiagopeixoto -p $DOCKER_TOKEN
    - docker push docker.io/tiagopeixoto/graph-tool
  only:
    - tags

build_docker_git:
  script:
    - cd release/docker
    - docker build --build-arg REF=`git log -n1 --pretty='%H'` -t tiagopeixoto/graph-tool-git . --no-cache
    - docker login -u tiagopeixoto -p $DOCKER_TOKEN
    - docker push docker.io/tiagopeixoto/graph-tool-git
  except:
    - tags
